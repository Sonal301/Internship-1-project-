# -*- coding: utf-8 -*-
"""PROJECT_WYNKMUSIC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fLqcucFgoywDq8KWi52vxD7H3vXfFB5y
"""

import requests
from bs4 import BeautifulSoup

# URL of the website to scrape
url = "https://en.wikipedia.org/wiki/List_of_2023_albums"

# Send a GET request to the URL
response = requests.get(url)

# Check if the request was successful
if response.status_code == 200:
    # Parse the HTML content of the page
    soup = BeautifulSoup(response.text, 'html.parser')

    # Example: Extract album names and artists from a table
    table = soup.find('table', class_='wikitable')
    rows = table.find_all('tr')

    for row in rows[1:]:  # Skip the header row
        cells = row.find_all('td')
        if len(cells) >= 2:
            album_name = cells[0].get_text(strip=True)
            artist_name = cells[1].get_text(strip=True)
            print(f"Album: {album_name}, Artist: {artist_name}")
else:
    print(f"Failed to fetch the webpage. Status code: {response.status_code}")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

# Sample data - Replace this with your scraped data
data = {
    "Album": ["Album1", "Album2", "Album3", "Album4", "Album1"],
    "Artist": ["Artist1", "Artist2", "Artist3", "Artist4", "Artist1"],
    "Album_Length": [40, 50, 60, 70, 40]  # Added numerical data
}
df = pd.DataFrame(data)

# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(df.head())

# Check for missing values
print("\nMissing values:")
print(df.isnull().sum())

# Data types and summary statistics
print("\nData types:")
print(df.dtypes)
print("\nSummary statistics:")
print(df.describe(include='all'))

# Visualization 1: Distribution of Albums by Artist
plt.figure(figsize=(10, 6))
sns.countplot(data=df, y='Artist', order=df['Artist'].value_counts().index)
plt.title("Number of Albums by Artist")
plt.xlabel("Count")
plt.ylabel("Artist")
plt.show()

# Visualization 2: Word Cloud of Album Names
album_text = ' '.join(df['Album'])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(album_text)
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title("Word Cloud of Album Names")
plt.show()

# Visualization 3: Pairplot (for numerical features)
sns.pairplot(df, vars=['Album_Length'], diag_kind='kde', kind="scatter", palette="husl")
plt.suptitle("Pairplot of Numerical Features", y=1.02)
plt.show()

# Visualization 4: Heatmap of correlations (for numerical features)
plt.figure(figsize=(8, 6))
corr_matrix = df[['Album_Length']].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

# Checking for duplicate entries
duplicates = df.duplicated().sum()
print(f"\nNumber of duplicate rows in the dataset: {duplicates}")

# Visualization 5: Distribution of duplicate rows by Artist (if duplicates exist)
if duplicates > 0:
    duplicate_rows = df[df.duplicated()]
    plt.figure(figsize=(8, 6))
    sns.countplot(x=duplicate_rows['Artist'], palette="cool")
    plt.title("Duplicate Rows by Artist")
    plt.xlabel("Artist")
    plt.ylabel("Count")
    plt.show()
else:
    print("No duplicates found in the dataset.")